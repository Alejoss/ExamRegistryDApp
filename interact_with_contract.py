import json
import os
from web3 import Web3, HTTPProvider

w3 = Web3(HTTPProvider('http://127.0.0.1:7545'))

contract_dir = os.path.abspath('./contracts/')
abi = json.loads('[{"constant":false,"inputs":[{"internalType":"address","name":"studentAddress","type":"address"}],"name":"studentAddExam","outputs":[{"internalType":"string","name":"returnString","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"string","name":"examProfessorHash","type":"string"}],"name":"checkStudentPassedExam","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"string","name":"hash","type":"string"}],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"string","name":"hash","type":"string"}],"name":"addExam","outputs":[{"internalType":"string","name":"examProfessorHash","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getProfessorsExam","outputs":[{"internalType":"string","name":"examProfessorHash","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]')
bytecode = "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610848806100606000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80633bf3687814610051578063442890d514610124578063b85e943d146101a7578063db8742951461027a575b600080fd5b61010a6004803603602081101561006757600080fd5b810190808035906020019064010000000081111561008457600080fd5b82018360208201111561009657600080fd5b803590602001918460018302840111640100000000831117156100b857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506103ae565b604051808215151515815260200191505060405180910390f35b61012c610581565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016c578082015181840152602081019050610151565b50505050905090810190601f1680156101995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610260600480360360208110156101bd57600080fd5b81019080803590602001906401000000008111156101da57600080fd5b8201836020820111156101ec57600080fd5b8035906020019184600183028401116401000000008311171561020e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506105a1565b604051808215151515815260200191505060405180910390f35b6103336004803603602081101561029057600080fd5b81019080803590602001906401000000008111156102ad57600080fd5b8201836020820111156102bf57600080fd5b803590602001918460018302840111640100000000831117156102e157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506106e6565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610373578082015181840152602081019050610358565b50505050905090810190601f1680156103a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60006060600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104855780601f1061045a57610100808354040283529160200191610485565b820191906000526020600020905b81548152906001019060200180831161046857829003601f168201915b5050505050905060006003826040518082805190602001908083835b602083106104c457805182526020820191506020810190506020830392506104a1565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209050600081600001856040518082805190602001908083835b602083106105335780518252602082019150602081019050602083039250610510565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff169050809350505050919050565b60606040518060600160405280602a81526020016107ea602a9139905090565b6000816040516020018082805190602001908083835b602083106105da57805182526020820191506020810190506020830392506105b7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405160200180828054600181600116156101000203166002900480156106b25780601f106106905761010080835404028352918201916106b2565b820191906000526020600020905b81548152906001019060200180831161069e575b50509150506040516020818303038152906040528051906020012014156106dc57600190506106e1565b600090505b919050565b606081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020908051906020019061073b929190610744565b50819050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061078557805160ff19168380011785556107b3565b828001600101855582156107b3579182015b828111156107b2578251825591602001919060010190610797565b5b5090506107c091906107c4565b5090565b6107e691905b808211156107e25760008160009055506001016107ca565b5090565b9056fe307836374634436642303361413545324537314465313437306165323661644237653333423738393245a265627a7a72315820cbf19342e9005a8d586b9ee7711c68dd63f8c56fe1657f9a9b44deb623f8a85d64736f6c634300050b0032"

print(w3.eth.blockNumber)

w3.eth.defaultAccount = w3.eth.accounts[0]
exams_contract = w3.eth.contract(abi=abi, bytecode=bytecode)

# This deploys the contract
constructor_hash = exams_contract.constructor().transact()
print("constructor_hash:")
print(constructor_hash)

tx_receipt = w3.eth.waitForTransactionReceipt(constructor_hash)

print("tx_receipt:")
print(tx_receipt)

exams = w3.eth.contract(
    address=tx_receipt.contractAddress,
    abi=abi
)

print("exams:")
print(exams)

# Test the contract
exam_hash = "9B70ECA3C4BF210264CE44B42DE6A2095C440B857D8F94A44F7440E389A3A1BC"

# Add an exam to the first address
tx_hash = exams.functions.addExam(exam_hash).transact()
print("tx_hash:")
print(tx_hash)

# Confirm the exam is owned by the first address
tx_hash2 = exams.functions.isOwner(exam_hash).call()

print("tx_hash2:")
print(tx_hash2)

# Add a student address to the list of addresses that have passed the exam
# print(w3. eth.accounts[1])
tx_hash3 = exams.functions.studentAddExam(w3.eth.accounts[1]).transact()  # Returns the professors exams hash

print("tx_hash3:")
print(tx_hash3)

print("exam_hash:")
print(exam_hash)

tx_hash4 = exams.functions.getProfessorsExam().call()

print("tx_hash4:")
print(tx_hash4)

tx_hash5 = exams.functions.checkStudentPassedExam(w3.eth.accounts[1], exam_hash).transact()

print("tx_hash5:")
print(tx_hash5)
